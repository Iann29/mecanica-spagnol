-- ===================================================================
-- SCRIPT DE CORRE√á√ÉO: Recurs√£o Infinita em Policies RLS
-- ===================================================================
-- 
-- PROBLEMA IDENTIFICADO:
-- A policy "Admins podem ver todos os perfis" causa recurs√£o infinita
-- quando a fun√ß√£o getProfile() √© executada, pois a policy verifica
-- se o usu√°rio √© admin fazendo uma nova query na tabela profiles,
-- o que dispara novamente a mesma policy criando um loop infinito.
--
-- SOLU√á√ÉO:
-- Criar uma fun√ß√£o SECURITY DEFINER que bypassa as policies RLS
-- para verificar se o usu√°rio √© admin, eliminando a recurs√£o.
--
-- DATA: 2025-01-17
-- AUTOR: Claude Code (Mec√¢nica Spagnol)
-- ===================================================================

-- In√≠cio da transa√ß√£o para rollback autom√°tico em caso de erro
BEGIN;

-- ===================================================================
-- BACKUP DA POLICY ATUAL (PARA REFER√äNCIA)
-- ===================================================================
/*
POLICY PROBLEM√ÅTICA QUE SER√Å REMOVIDA:

CREATE POLICY "Admins podem ver todos os perfis" ON profiles
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM profiles                    -- ‚ùå AUTO-REFER√äNCIA
      WHERE profiles.id = auth.uid() AND profiles.role = 'admin'
    )
  );

PROBLEMA: A query EXISTS faz uma nova consulta na tabela profiles,
o que dispara novamente a policy, criando recurs√£o infinita.
*/

-- ===================================================================
-- 1. CRIAR FUN√á√ÉO SECURITY DEFINER PARA VERIFICAR ADMIN
-- ===================================================================

-- Primeiro, verificar se a fun√ß√£o j√° existe e remov√™-la
DROP FUNCTION IF EXISTS public.is_admin_user() CASCADE;

-- Criar fun√ß√£o que verifica se o usu√°rio atual √© admin
-- SECURITY DEFINER permite que a fun√ß√£o execute com privil√©gios elevados
-- bypassing as policies RLS da tabela profiles
CREATE OR REPLACE FUNCTION public.is_admin_user()
RETURNS BOOLEAN
SECURITY DEFINER -- Executa com privil√©gios de superuser, bypassa RLS
SET search_path = public, auth -- Fixa search_path para seguran√ßa
LANGUAGE plpgsql
AS $$
DECLARE
  user_role text;
BEGIN
  -- Verificar se existe sess√£o ativa
  IF auth.uid() IS NULL THEN
    RETURN FALSE;
  END IF;

  -- Buscar role do usu√°rio atual diretamente (sem RLS)
  -- Esta query N√ÉO dispara policies pois a fun√ß√£o √© SECURITY DEFINER
  SELECT role INTO user_role
  FROM public.profiles 
  WHERE id = auth.uid();

  -- Retornar true se √© admin, false caso contr√°rio
  RETURN COALESCE(user_role = 'admin', FALSE);

EXCEPTION 
  WHEN NO_DATA_FOUND THEN
    -- Usu√°rio n√£o tem profile, n√£o √© admin
    RETURN FALSE;
  WHEN OTHERS THEN
    -- Em caso de qualquer erro, assumir que n√£o √© admin por seguran√ßa
    RAISE WARNING 'Erro ao verificar role de admin para user %: %', auth.uid(), SQLERRM;
    RETURN FALSE;
END;
$$;

-- Adicionar coment√°rio explicativo na fun√ß√£o
COMMENT ON FUNCTION public.is_admin_user() IS 
'Verifica se o usu√°rio atual √© admin. Fun√ß√£o SECURITY DEFINER para bypassing RLS policies e evitar recurs√£o infinita.';

-- ===================================================================
-- 2. REMOVER POLICY PROBLEM√ÅTICA
-- ===================================================================

-- Remover a policy que causa recurs√£o infinita
DROP POLICY IF EXISTS "Admins podem ver todos os perfis" ON profiles;

-- ===================================================================
-- 3. CRIAR NOVA POLICY USANDO FUN√á√ÉO SEGURA
-- ===================================================================

-- Criar nova policy que usa a fun√ß√£o security definer
-- Esta policy N√ÉO causa recurs√£o pois is_admin_user() bypassa RLS
CREATE POLICY "Admins podem ver todos os perfis" ON profiles
  FOR SELECT USING (public.is_admin_user());

-- Adicionar coment√°rio explicativo na policy
COMMENT ON POLICY "Admins podem ver todos os perfis" ON profiles IS 
'Permite que admins vejam todos os perfis usando fun√ß√£o security definer para evitar recurs√£o infinita.';

-- ===================================================================
-- 4. VALIDA√á√ïES DE FUNCIONAMENTO
-- ===================================================================

-- Verificar se a fun√ß√£o foi criada corretamente
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_proc 
    WHERE proname = 'is_admin_user' 
    AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
  ) THEN
    RAISE EXCEPTION 'Fun√ß√£o is_admin_user() n√£o foi criada corretamente';
  END IF;
  
  RAISE NOTICE '‚úÖ Fun√ß√£o is_admin_user() criada com sucesso';
END $$;

-- Verificar se a policy foi criada corretamente
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'profiles' 
    AND policyname = 'Admins podem ver todos os perfis'
  ) THEN
    RAISE EXCEPTION 'Policy n√£o foi criada corretamente';
  END IF;
  
  RAISE NOTICE '‚úÖ Policy "Admins podem ver todos os perfis" recriada com sucesso';
END $$;

-- ===================================================================
-- 5. TESTE B√ÅSICO DA FUN√á√ÉO
-- ===================================================================

-- Testar se a fun√ß√£o executa sem erros (mesmo sem usu√°rio logado)
DO $$
DECLARE
  result boolean;
BEGIN
  -- Chamar fun√ß√£o (deve retornar false pois n√£o h√° sess√£o ativa)
  SELECT public.is_admin_user() INTO result;
  
  RAISE NOTICE '‚ÑπÔ∏è  Teste da fun√ß√£o is_admin_user(): % (esperado: false sem sess√£o)', result;
END $$;

-- ===================================================================
-- 6. INFORMA√á√ïES PARA ROLLBACK (SE NECESS√ÅRIO)
-- ===================================================================

/*
PLANO DE ROLLBACK EM CASO DE PROBLEMAS:

1. Remover nova policy:
   DROP POLICY IF EXISTS "Admins podem ver todos os perfis" ON profiles;

2. Remover fun√ß√£o:
   DROP FUNCTION IF EXISTS public.is_admin_user() CASCADE;

3. Recriar policy original (problem√°tica, mas funcional para usu√°rios n√£o-admin):
   CREATE POLICY "Admins podem ver todos os perfis" ON profiles
     FOR SELECT USING (
       EXISTS (
         SELECT 1 FROM profiles
         WHERE profiles.id = auth.uid() AND profiles.role = 'admin'
       )
     );

NOTA: A policy original continuar√° causando recurs√£o, mas permitir√° 
que usu√°rios n√£o-admin fa√ßam login normalmente.
*/

-- ===================================================================
-- FINALIZAR TRANSA√á√ÉO
-- ===================================================================

-- Confirmar todas as altera√ß√µes
COMMIT;

-- ===================================================================
-- MENSAGEM FINAL
-- ===================================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE 'üéâ CORRE√á√ÉO APLICADA COM SUCESSO!';
  RAISE NOTICE '';
  RAISE NOTICE 'Altera√ß√µes realizadas:';
  RAISE NOTICE '  ‚úÖ Fun√ß√£o is_admin_user() criada (SECURITY DEFINER)';
  RAISE NOTICE '  ‚úÖ Policy "Admins podem ver todos os perfis" atualizada';
  RAISE NOTICE '  ‚úÖ Recurs√£o infinita eliminada';
  RAISE NOTICE '';
  RAISE NOTICE 'Pr√≥ximos passos:';
  RAISE NOTICE '  1. Testar login de usu√°rio admin';
  RAISE NOTICE '  2. Testar login de usu√°rio comum';  
  RAISE NOTICE '  3. Verificar se o redirecionamento funciona';
  RAISE NOTICE '  4. Validar menu do usu√°rio no header';
  RAISE NOTICE '';
  RAISE NOTICE 'Em caso de problemas, consulte o plano de rollback no script.';
  RAISE NOTICE '';
END $$;